      SUBROUTINE RCMELM(MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
     *                  ME,N,N1,NEX,NE,NP,NMAX,EPS,EPSRE,MRCM,NMAXB,
     *                  NODE,CM,DNXYZ,DNXI,DNYI,DNZI,
     *                  B,NPFIX,LPFIX,NPSYMT,LPSYMT,
     *                  XPSYMT,YPSYMT,ZPSYMT,NITRCM,RESR,S,
     *                  IPART,NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,
     *                  FXYZ,WRK01,WRK02,WRK03,WRK04,
     *                  WRK05,WRK06,RRCM, W1RCM,W2RCM,PRCM,APRCM,
     *                  RX,RY,MWRK,WRKN,
     *                  IUT0,IERR)
#include "timing.h"
      IMPLICIT NONE
C
CCC   [LOOP]
      INTEGER*4 MCOLOR,MCPART
      INTEGER*4 NCOLOR(4),NCPART(MCOLOR,4),LLOOP(MCPART,MCOLOR,4)
C
CCC   [FOR MID.NODES]
C
CCC   [INPUT]
      INTEGER*4 ME,N,N1,NEX(8),NE,NP,NMAX,MRCM,NMAXB,IUT0
      REAL*4    EPS,EPSRE
      INTEGER*4 NODE(N1,NE)
      REAL*4    CM(NP),
     *          DNXYZ(3,N1,ME),
     *          DNXI(N1,ME),DNYI(N1,ME),DNZI(N1,ME),
     *          B(NE)
      REAL*4    XPSYMT(NPSYMT),YPSYMT(NPSYMT),ZPSYMT(NPSYMT)
      INTEGER*4 NPFIX,LPFIX(NPFIX),
     *          NPSYMT,LPSYMT(NPSYMT)
      INTEGER*4 IPART,NDOM,MBPDOM,
     *          LDOM(NDOM),NBPDOM(NDOM),
     *          IPSLF(MBPDOM,NDOM),IPSND(MBPDOM,NDOM)
C
C     [IN:MID NODE COLORING]
C
CCC [INPUT/OUTPUT]
      REAL*4    S(NE)
      REAL*4    RES
C
CCC [OUTPUT]
      INTEGER*4 NITR,IERR
C
CCC [WORK]
      REAL*4    RX(0:N,ME),RY(0:N,ME),
     *          FXYZ(3,NP),WRK01(NE),WRK02(NE),
     *          WRK03(NE),WRK04(NE),WRK05(NE),WRK06(NE),
     *          RRCM(NE),PRCM(MRCM,NE),APRCM(MRCM,NE),
     *          W1RCM(NE),W2RCM(NE)
      INTEGER*4 MWRK
      REAL*4    WRKN(MWRK,9)
C
CCCC  [LOCL]
      INTEGER*4 IE
      REAL*4    BDOT,BDOTA,RESR,RSDOT,RSDOTA
      INTEGER*4 LRCM(MRCM)
      REAL*4    ARCM(MRCM,MRCM),BRCM(MRCM)
C
      INTEGER*4 MRCMAX
      DATA MRCMAX / 10 /
      REAL*4    EPS0,EPSB 
      DATA EPS0 / 1.E-30 /
      DATA EPSB / -1.0E0 /
C
      INTEGER*4 I,J,NITRCM,NITRB,NMAXRCM,NRCM
      REAL*4    ATEMP,BTEMP,BUF,RESB
C
      CHARACTER*60 ERMSGC
     & /' ## SUBROUTINE RESCUT: FATAL      ERROR REPORT   ; RETURNED' /
C
      CHARACTER*60 ERMSG1
     & /' ## SUBROUTINE RESCUT: INVALID PARAMETER         ; RETURNED' /
C
C      SOLVE MATRIX EQUATION AT ELEMENTS BY BI-CGSTAB METHOS
C         ( 3-D CALCULATION : SINGLE WORD & MULTI ELEMENT VERSION )
C
C       WRITTEN BY Y. YAMADE 2011.01.20
C
C          OPERATION COUNTS:    FLOP /ELEMENT/ITERATION
C          DATA LOADINGS   :    WORDS/ELEMENT/ITERATION
C                           (   WORDS CONTIGUOUSLY,
C                               WORDS BY 4-WORD STRIDE, AND
C                               WORDS BY LIST )
C
C     ARGUMENT LISTINGS
C (1) INPUT
C INT *4 ME           ; MAX. NUMBER OF TOTAL ELEMENTS
C INT *4 N1           ; THE DIMENSION SIZE OF THE FIRST ELEMENTS OF THE 
C                       PASSED ARRAYS 'NODET'
C INT *4 NE           ; NUMBER OF ELEMENTS
C INT *4 NP           ; NUMBER OF NODES
C INT *4 NEX       (I); INCLUDES NUMBER OF ELEMENTS AND NUMBER OF LOCAL NODES
C INT *4 NE           ; NUMBER OF ELEMENTS
C INT *4 NP           ; NUMBER OF NODES
C INT *4 NMAX         ; NUMBER OF MATRIX SOLVER ITERATIONS
C INT *4 IUT0         ; FILE NUMBER TO REPORT ERROR OCCURENCE
C REAL*4 EPS          ; MAXIMUM ALLOWABLE ERROR
C INT *4 NODE   (I,IE); NODE TABLE
C REAL*4 CM       (IP); INVERSED LUMPED MASS MATRIX
C REAL*4 DNX    (I,IE); ELEMENT CENTER VALUE OF NX
C REAL*4 DNY    (I,IE); ELEMENT CENTER VALUE OF NY
C REAL*4 DNZ    (I,IE); ELEMENT CENTER VALUE OF NZ
C REAL*4 DNXI   (I,IE); ELEMENT CENTER VALUE OF NX
C REAL*4 DNYI   (I,IE); ELEMENT CENTER VALUE OF NX
C REAL*4 DNZI   (I,IE); ELEMENT CENTER VALUE OF NX
C
C REAL*4 B        (IE); GLOBAL FORCE VECTOR  
C INT *4 NFIX         ; NUMBER OF FIX BOUNDARY NODES
C INT *4 LPFIX    (IB); FIX BOUNDARY NODES
C
C INT *4 IPART        ; SUB-DOMAIN NUMBER THAT THIS TASK SHOULD TAKE/IS
C                       TAKING CARE OF. IPART BEING SET ZERO MEANS THAT
C                       THE PROGRAM SHOULD RUN/IS RUNNING IN SERIAL 
C                       MODE.
C INT *4 NDOM         ; NUMBER OF THE NERIBERING SUB-DOMAINS
C INT*4  MBPDOM       ; THE MAXIMUM NUMBER OF THE INTER-CONNECT 
C                       BOUNDARY NODES FOR ONE NEIBERING SUB-DOMAIN
C INT *4 LDOM   (IDOM); NEIBERING SUB-DOMAIN NUMBER
C INT *4 NBPDOM (IDOM); NUMBER OF INTER-CONNECT BOUNDARY NODES
C                       SHARING WITH THE IDOM'TH NEIBERING SUB-DOMAIN,
C                       LDOM(IDOM)
C INT *4 IPSLF(I,IDOM); INTER-CONNECT BOUNDARY NODE NUMBER IN THE
C                       CALLING TASK'S SUB-DOMAIN, FOR THE IDOM'TH
C                       NEIBERING SUB-DOMAIN, LDOM(IDOM)
C INT *4 IPSND(I,IDOM); INTER-CONNECT BOUNDARY NODE NUMBER IN THE
C                       SUB-DOMAIN THAT IS RECEIVING THE CALLING
C                       TASK'S RESIDUALS.
C
C (2) INPUT/OUTPUT     
C REAL*4 S        (IE); GLOBAL SOLUTION VECTOR (PROVIDE INITIAL GUESS) 
C
C (3) OUTPUT     
C INT *4 NITR         ; NUMBER OF ITERATIONS DONE
C REAL*4 RES          ; L2-NORM RESIDUAL OF THE FINAL SOLUTION VECTOR
C INT *4 IERR         ; RETURN CODE TO REPORT ERROR OCCURRENCE
C                   0 --- NORMAL TERMINATION
C                   1 --- A FATAL ERROR HAS OCCURRED
C
C (4) WORK     
C REAL*4 RX     (I,IE); WORK REGION PASSED FOR CALLAP
C REAL*4 RY     (I,IE); WORK REGION PASSED FOR CALLAP
C REAL*4 R0       (IE); WORK REGION
C REAL*4 RK       (IE); WORK REGION
C REAL*4 PK       (IE); WORK REGION
C REAL*4 APK      (IE); WORK REGION
C REAL*4 ATK      (IE); WORK REGION
C REAL*4 TK       (IE); WORK REGION
C
C
      IERR = 0
C
      IF(MRCM.GE.MRCMAX) THEN
          WRITE(IUT0,*) ERMSG1
          IERR = 1
          RETURN
      ENDIF
C
      NMAXRCM = NMAX/NMAXB
      IF(NMAXRCM.EQ.0) RETURN
C
C
C
C
C
C SET INITIAL RESIDUAL :RRCM
C
      TIME_START(TM_CALLAP)
      CALL CALLAP(MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
     *            ME,N,N1,NE,NP,NEX,NODE,
     *            S,RRCM,DNXYZ,DNXI,DNYI,DNZI,
     *            CM,
     *            IPART,NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,
     *            NPFIX,LPFIX,
     *            NPSYMT,LPSYMT,XPSYMT,YPSYMT,ZPSYMT,
     *            FXYZ,RX,RY,MWRK,WRKN,
     *            IUT0,IERR)
      TIME_STOP(TM_CALLAP)
C
      IF(IERR.NE.0) THEN
          WRITE(IUT0,*)
          WRITE(IUT0,*) ERMSGC
          RETURN
      ENDIF
C
      DO 100 IE = 1 , NE
          RRCM(IE)   = B(IE)-RRCM(IE)
          W1RCM(IE)  = 0.E0
  100 CONTINUE
      NITR   = 0
      NITRCM = 0
C
C CALCULATE MAGNITUDE OF B
      BDOT = 0.E0
C 2F/1W(1C)
      DO 200 IE = 1 , NE
          BDOT = BDOT+B(IE)*B(IE)
  200 CONTINUE
C
      IF(IPART.GE.1) THEN
          TIME_START(TM_PRES3E_COM)
          CALL DDCOM2(BDOT,BDOTA)
          TIME_STOP(TM_PRES3E_COM)
          BDOT = BDOTA
      ENDIF
C
      IF(ABS(BDOT).LE.EPS0) BDOT = 1.0E0
C
      RSDOT = 0.E0
      DO 300 IE = 1 , NE
          RSDOT = RSDOT+RRCM(IE)*RRCM(IE)
  300 CONTINUE
C
      IF(IPART.GE.1) THEN
          TIME_START(TM_PRES3E_COM)
          CALL DDCOM2(RSDOT,RSDOTA)
          TIME_STOP(TM_PRES3E_COM)
          RSDOT = RSDOTA
      ENDIF
C
      RES  = SQRT(RSDOT)
      RESR = RES/SQRT(BDOT)
CCYYDEB---
CC    WRITE(90,'(I8,2E13.5)') NITR,RES,RESR
C     WRITE(90,*) 'RES',NITRCM,RES,RESR
CCYYDEB---
#if 0
      IF(RESR.LE.EPSRE) RETURN
#else
      if (EPS > 0.0) then
        IF(RESR.LE.EPSRE) RETURN
      end if
#endif
C
  350 CONTINUE
      NITR = NITR+1
C
      IF(NITR.GE.MRCM) THEN
          NRCM = MRCM
      ELSE
          NRCM = NITR
      ENDIF
C
C
C    COMPUTE PRODUCT OF COEFFICIENT MATRIX AND SEARCH-DIRECTION VECTOR
C    AND INNER PRODUCT OF COMPUTED PRODUCT AND SEARCH-DIRECTION VECTOR
C
C
C
C
C COMPUTE TEMPORARY SOLUTION OF RESIDUAL EQUATION :
C
      TIME_START(TM_BCGSXE)
      CALL BCGSXE(MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
     *            ME,N,N1,NEX,NE,NP,NMAXB,EPSB,EPSRE,
     *            NODE,CM,DNXYZ,DNXI,DNYI,DNZI,
     *            RRCM,
     *            NPFIX,LPFIX,NPSYMT,LPSYMT,XPSYMT,YPSYMT,ZPSYMT,
     *            NITRB,RESB,W1RCM,
     *            IPART,NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,
     *            WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,
     *            FXYZ,RX,RY,MWRK,WRKN,
     *            IUT0,IERR)
      TIME_STOP(TM_BCGSXE)
      IF(IERR.NE.0) THEN
          WRITE(IUT0,*)
          WRITE(IUT0,*) ERMSGC
          RETURN
      ENDIF
C
      TIME_START(TM_CALLAP)
      CALL CALLAP(MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
     *            ME,N,N1,NE,NP,NEX,NODE,
     *            W1RCM,W2RCM,DNXYZ,DNXI,DNYI,DNZI,
     *            CM,
     *            IPART,NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,
     *            NPFIX,LPFIX,
     *            NPSYMT,LPSYMT,XPSYMT,YPSYMT,ZPSYMT,
     *            FXYZ,RX,RY,MWRK,WRKN,
     *            IUT0,IERR)
      TIME_STOP(TM_CALLAP)
C
      IF(IERR.NE.0) THEN
          WRITE(IUT0,*)
          WRITE(IUT0,*) ERMSGC
          RETURN
      ENDIF
C
C
C  UPDATE SEARCH VECTORS AND PRODUCTION OF MATRIX AND SERACH VECTORS
C
C
C 0F/6W(6S)
*POPTION INDEP(PRCM,APRCM)
!CDIR LOOPCNT=6
      DO 410 J = NRCM, 2, -1
!CDIR VECTOR
          DO 400 IE = 1 , NE
              PRCM (J,IE) = PRCM (J-1,IE)
              APRCM(J,IE) = APRCM(J-1,IE)
  400     CONTINUE
  410 CONTINUE
C
C     J = 1
C 0F/2W(2C)
      DO 500 IE = 1 , NE
          PRCM (1,IE) = W1RCM(IE)
          APRCM(1,IE) = W2RCM(IE)
  500 CONTINUE
C
C
C  INITIALIZE FOR RESIDUAL MINIMIZE EQUATION
C
C
      DO 610 I = 1 , NRCM
          DO 600 J = 1 , NRCM
              ARCM(I,J) = 0.E0
  600     CONTINUE
  610 CONTINUE
C
      DO 700 I = 1 , NRCM
          BRCM(I) = 0.E0
  700 CONTINUE
C
C
C  COMPUTE COEFFICIENTS OF RESIDUAL MINIMIZE EQUATION
C
C
C 34F/36W(32S+4C)
!CDIR NOVECTOR 
      DO 820 I = 1 , NRCM
!CDIR NOVECTOR 
          DO 810 J = 1 , NRCM
              ATEMP = 0.E0
!CDIR VECTOR
              DO 800 IE = 1 , NE
                   ATEMP = ATEMP+APRCM(I,IE)*APRCM(J,IE)
  800         CONTINUE
              ARCM(I,J) = ATEMP
  810     CONTINUE
  820 CONTINUE
C  I == 1
!CDIR NOVECTOR 
      DO 910 J = 1 , NRCM
          BTEMP = 0.E0
!CDIR VECTOR
          DO 900 IE = 1 , NE
               BTEMP = BTEMP+APRCM(J,IE)*RRCM(IE)
  900     CONTINUE
          BRCM(J) = BTEMP
  910 CONTINUE
C
      IF(IPART.GE.1) THEN
          DO 1020 J = 1 , NRCM
              DO 1010 I = 1 , NRCM
                  TIME_START(TM_PRES3E_COM)
                  CALL DDCOM2(ARCM(I,J),BUF)
                  TIME_STOP(TM_PRES3E_COM)
                  ARCM(I,J) = BUF
 1010         CONTINUE
              TIME_START(TM_PRES3E_COM)
              CALL DDCOM2(BRCM(J),BUF)
              TIME_STOP(TM_PRES3E_COM)
              BRCM(J) = BUF
 1020     CONTINUE
      ENDIF
C
C
C  SOLVE RESIDUAL MINIMIZE EQUATION :BRCM
C
C
      CALL MATGAU(MRCM,NRCM,ARCM,BRCM,W1RCM,LRCM,IUT0,IERR)
C
      IF(IERR.NE.0) THEN
          WRITE(IUT0,*)ERMSGC
          RETURN
      ENDIF
C
C
C  UPDATE SEAECH VECTOR
C
C
C J == 1
C 1F/1W(1S)
      DO 1100 IE = 1 , NE
          PRCM(1,IE) = BRCM(1)*PRCM(1,IE)
 1100 CONTINUE
C
C 6F/6W(6S)
*POPTION INDEP(PRCM,BRCM)
      DO 1210 IE = 1 , NE
          DO 1200 J = 2, NRCM
              PRCM(1,IE) = PRCM(1,IE)+BRCM(J)*PRCM(J,IE)
 1200     CONTINUE
 1210 CONTINUE
C
C
C  UPDATE SOLUTION VECTOR
C
C
C 1F/2W(1C+1S)
      DO 1300 IE = 1 , NE
          S(IE) = S(IE)+PRCM(1,IE)
 1300 CONTINUE
C
C
C
C  COMPUTE RESIDUAL
C
C
      TIME_START(TM_CALLAP)
      CALL CALLAP(MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
     *            ME,N,N1,NE,NP,NEX,NODE,
     *            S,RRCM,DNXYZ,DNXI,DNYI,DNZI,
     *            CM,
     *            IPART,NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,
     *            NPFIX,LPFIX,
     *            NPSYMT,LPSYMT,XPSYMT,YPSYMT,ZPSYMT,
     *            FXYZ,RX,RY,MWRK,WRKN,
     *            IUT0,IERR)
      TIME_STOP(TM_CALLAP)
C
      IF(IERR.NE.0) THEN
          WRITE(IUT0,*)
          WRITE(IUT0,*) ERMSGC
          RETURN
      ENDIF
C
C 1F/2W(2C)
      DO 1400 IE = 1 , NE
          RRCM(IE) = B(IE)-RRCM(IE)
 1400 CONTINUE
C
C 2F/1W(1C)
      RSDOT = 0.E0
      DO 1500 IE = 1 , NE
          RSDOT = RSDOT+RRCM(IE)*RRCM(IE)
 1500 CONTINUE
C
      IF(IPART.GE.1) THEN
          TIME_START(TM_PRES3E_COM)
          CALL DDCOM2(RSDOT,RSDOTA)
          TIME_STOP(TM_PRES3E_COM)
          RSDOT = RSDOTA
      ENDIF
C
      RES  = SQRT(RSDOT)
      RESR = RES/SQRT(BDOT)
CCYYDEB---
CC    WRITE(90,'(I8,2E13.5)') NITR,RES,RESR      
C      WRITE(90,*) 'RES',NITRCM,RES,RESR
CCYYDEB---
C
      NITRCM = NITRCM+NITRB
#if 0
      IF(RESR.LE.EPSRE.OR.RES.LE.EPS) RETURN
#else
      if (EPS > 0.0) then
        IF(RESR.LE.EPSRE.OR.RES.LE.EPS) RETURN
      end if
#endif
      IF(NITR.EQ.NMAXRCM) RETURN
C
C
C  COMPUTE PRODUCTION OF MATRIX AND TEPORARY SOLUTION
C
C
      DO 1600 IE = 1 , NE
          W1RCM(IE) = PRCM(1,IE)
 1600 CONTINUE
C
      TIME_START(TM_CALLAP)
      CALL CALLAP(MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
     *            ME,N,N1,NE,NP,NEX,NODE,
     *            W1RCM,W2RCM,DNXYZ,DNXI,DNYI,DNZI,
     *            CM,
     *            IPART,NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,
     *            NPFIX,LPFIX,
     *            NPSYMT,LPSYMT,XPSYMT,YPSYMT,ZPSYMT,
     *            FXYZ,RX,RY,MWRK,WRKN,
     *            IUT0,IERR)
      TIME_STOP(TM_CALLAP)
C
      IF(IERR.NE.0) THEN
          WRITE(IUT0,*)
          WRITE(IUT0,*) ERMSGC
          RETURN
      ENDIF
C 0F/1W(1C)
      DO 1700 IE = 1 , NE
          APRCM(1,IE) = W2RCM(IE)
          W1RCM(IE)   = 0.E0
 1700 CONTINUE
C
C     RETURN IF ITERATION NUMBER HAS REACHED THE GIVEN MAXIMUM NUMBER,
C    OTHERWISE CONTINUE ITERATIONS UNTIL SOLUTION IS CONVERGED
C
C
      GO TO 350
C
      END
